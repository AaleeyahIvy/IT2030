@model BookListViewModel

@{
    ViewData["Title"] = " | Book Catalog";

    // aliases to make paging, sorting, and filtering code shorter
    RouteDictionary current = Model.CurrentRoute;
    RouteDictionary routes = Model.CurrentRoute.Clone();
}

<h1>Book Catalog</h1>
<div class="row">
    <div class="col-9">
@* filter form *@
<form asp-action="Filter" method="post" class="form-inline">
    <label>Author: </label>
    <select name="filter" class="form-control m-2"
            asp-items="@(new SelectList(
            Model.Authors, "AuthorId", "FullName", current.AuthorFilter))">
        <option value="@BooksGridDTO.DefaultFilter">All</option>
    </select>

    <label>Genre: </label>
    <select name="filter" class="form-control m-2"
            asp-items="@(new SelectList(
            Model.Genres, "GenreId", "Name", current.GenreFilter))">
        <option value="@BooksGridDTO.DefaultFilter">All</option>
    </select>

    <label>Price: </label>
    <select name="filter" class="form-control m-2"
            asp-items="@(new SelectList(
            Model.Prices, "Key", "Value", current.PriceFilter))">
        <option value="@BooksGridDTO.DefaultFilter">All</option>
    </select>

    <button type="submit" class="btn btn-primary mr-2">Filter</button>
    <button type="submit" class="btn btn-primary"
            name="clear" value="true">
        Clear
    </button>
</form>
   </div>
    <div class="col">
        <form asp-action="PageSize" method="post" class="form-inline">
            <label>Page Size: </label>
            <select name="pagesize" class="form-control m-2"
                    asp-items="@(new SelectList(Model.PageSizes, current.PageSize))">
            </select>

            <button type="submit" class="btn btn-primary mr-2">Save</button>
        </form>
        </div>
    </div>

@* add to cart form *@
<form asp-action="Add" asp-controller="Cart" method="post">
    <table class="table table-bordered table-striped table-sm">
        @* for each sortable table column, update the route dictionary with the field to sort by, and then 
           use that route dictionary and the current route to create route segments for sorting link *@
        <thead class="thead-dark">
            <tr>
                <th>
                    @{ routes.SetSortAndDirection(nameof(Book.Title), current); }
                    <a asp-action="List" asp-all-route-data="@routes"
                       class="text-white">Title</a>
                </th>
                <th>Author(s)</th>
                <th>
                    @{ routes.SetSortAndDirection(nameof(Genre), current); }
                    <a asp-action="List" asp-all-route-data="@routes"
                       class="text-white">Genre</a>
                </th>
                <th>
                    @{ routes.SetSortAndDirection(nameof(Book.Price), current); }
                    <a asp-action="List" asp-all-route-data="@routes"
                       class="text-white">Price</a>
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Book book in Model.Books)
            {
                <tr>
                    <td>
                        <a asp-action="Details" asp-route-id="@book.BookId"
                           asp-route-slug="@book.Title.Slug()">
                            @book.Title
                        </a>
                    </td>
                    <td>
                        @foreach (var ba in book.BookAuthors)
                        {
                            <p>
                                <a asp-action="Details" asp-controller="Author"
                                   asp-route-id="@ba.AuthorId"
                                   asp-route-slug="@ba.Author.FullName.Slug()">
                                    @ba.Author.FullName
                                </a>
                            </p>
                        }
                    </td>
                    <td>@book.Genre?.Name</td>
                    <td>@book.Price.ToString("c")</td>
                    <td>
                        <button type="submit" name="id" value="@book.BookId"
                                class="btn btn-primary">
                            Add To Cart
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</form>

@* paging links *@
@{
    @* Reset the route dictionary to the current route values. This is necessary
        to clear the changes made while creating the sorting links above. Clone so
        don't overwrite current route segment values. *@
    routes = Model.CurrentRoute.Clone();

    @* update route dictionary with page number in 'i' and then use
        updated route dictionary to create route segments for paging link.*@
    for (int i = 1; i <= Model.TotalPages; i++)
    {
        routes.PageNumber = i;
        <a asp-action="List" asp-all-route-data="@routes"
           class="btn btn-outline-primary @Nav.Active(i, current.PageNumber)">@i</a>
    }
}
